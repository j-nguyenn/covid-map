{"version":3,"sources":["components/Footer/Footer.tsx","utils/map.ts","components/WorldMap/WorldMap.tsx","components/OverviewTab/OverviewTab.tsx","context/GlobalContext.ts","views/Home.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Footer","className","alt","src","href","DEFAULT_CASE","getStyle","cases","size","getSize","getMarkerHTML","props","updatedFormatted","country","updated","deaths","recovered","casesString","slice","Date","toLocaleString","WorldMap","useState","data","setData","map","setMap","didMount","useRef","fetchData","useCallback","fetch","then","res","json","catch","err","console","warn","useEffect","current","formatGeoData","response","Array","isArray","length","geoJson","type","features","countryInfo","lat","lng","long","properties","geometry","coordinates","L","GeoJSON","pointToLayer","feature","latlng","marker","icon","divIcon","html","riseOnHover","addTo","MapContainer","center","zoom","scrollWheelZoom","whenCreated","LayersControl","BaseLayer","checked","name","TileLayer","url","attribution","OverviewTab","Object","keys","todayCases","todayDeaths","todayRecovered","tests","testsPerOneMillion","toISOString","GlobalContext","createContext","darkTheme","setDarkTheme","isDark","Home","Provider","value","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.407e3030.chunk.js","sourcesContent":["import React from \"react\";\n//import { ThemeSwitcher } from \"../ThemeSwitcher/ThemeSwitcher\";\nimport \"./Footer.scss\";\n\nexport const Footer = () => {\n  return (\n    <footer className=\"footer-container\">\n      <div className=\"grid\">\n        <div className=\"avatar-container\">\n          <img\n            alt=\"\"\n            src=\"https://media0.giphy.com/media/mVJ5xyiYkC3Vm/giphy.gif?cid=790b7611ad2812b1ccf7f99cf2e9764d8ac87928c092140a&rid=giphy.gif\"\n          />\n          <small>\n            Â© 2021 by\n            <a href=\"https://j-nguyenn.github.io/covid-map/\">JASMINE NG </a>\n          </small>\n        </div>\n      </div>\n      {/* <div className=\"grid\">\n        <ThemeSwitcher />\n      </div> */}\n    </footer>\n  );\n};\n","const DEFAULT_CASE = 1000000;\n\nconst getSize = (cases: number) => {\n  if (cases / DEFAULT_CASE > 10) {\n    return 10;\n  }\n  if (cases / DEFAULT_CASE < 1) {\n    return 1;\n  }\n  return cases / DEFAULT_CASE;\n};\n\nconst getStyle = (cases: number) => {\n  const size = getSize(cases);\n  return `width: ${size}rem; height: ${size}rem; margin-left: -${\n    size / 2\n  }rem; margin-top: -${size / 2}rem`;\n};\nconst getMarkerHTML = (props: any) => {\n  const { country, updated, cases, deaths, recovered } = props;\n\n  let updatedFormatted;\n  let casesString = `${cases}`;\n  if (cases > 1000) {\n    casesString = `${casesString.slice(0, -3)}k+`;\n  }\n\n  if (updated) {\n    updatedFormatted = new Date(updated).toLocaleString();\n  }\n\n  const html = `\n  <div class=\"marker-container\">\n    <span class=\"icon-marker-tooltip\">\n        <h2>${country}</h2>\n        <ul>\n        <li><strong>Confirmed:</strong> ${cases}</li>\n        <li><strong>Deaths:</strong> ${deaths}</li>\n        <li><strong>Recovered:</strong> ${recovered}</li>\n        <li><strong>Last Update:</strong> ${updatedFormatted}</li>\n        </ul>\n    </span>\n    <span class=\"icon-marker\" style=\"${getStyle(cases)}\">\n        ${casesString}\n    </span>\n  </div>\n        `;\n\n  return html;\n};\n\nexport { getMarkerHTML };\n","import React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport { MapContainer, TileLayer, LayersControl } from \"react-leaflet\";\nimport L from \"leaflet\";\nimport \"./WorldMap.scss\";\nimport { getMarkerHTML } from \"../../utils/map\";\n\nexport const WorldMap = () => {\n  const [data, setData] = useState<any>([]);\n  const [map, setMap] = useState<any>();\n  const didMount = useRef<boolean>(false);\n\n  const fetchData = useCallback(() => {\n    const url = \"https://disease.sh/v3/covid-19/countries\";\n    fetch(url)\n      .then((res) => res.json())\n      .then((res) => {\n        setData(res);\n      })\n      .catch((err) => {\n        console.warn({ err });\n      });\n  }, []);\n\n  useEffect(() => {\n    fetchData();\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    if (map && data && !didMount.current) {\n      formatGeoData(data);\n    }\n    // eslint-disable-next-line\n  }, [map, data]);\n\n  const formatGeoData = (response: any[]) => {\n    const hasData = Array.isArray(response) && response.length > 0;\n    if (!hasData) return;\n\n    const geoJson: any = {\n      type: \"FeatureCollection\",\n      features: response.map((country: any) => {\n        const { countryInfo = {} } = country;\n        const { lat, long: lng } = countryInfo;\n        return {\n          type: \"Feature\",\n          properties: {\n            ...country,\n          },\n          geometry: {\n            type: \"Point\",\n            coordinates: [lng, lat],\n          },\n        };\n      }),\n    };\n\n    const geoJsonLayers = new L.GeoJSON(geoJson, {\n      pointToLayer: (feature, latlng) => {\n        const { properties = {} } = feature;\n\n        return L.marker(latlng, {\n          icon: L.divIcon({\n            className: \"icon\",\n            html: getMarkerHTML(properties),\n          }),\n          riseOnHover: true,\n        });\n      },\n    });\n    geoJsonLayers.addTo(map);\n    didMount.current = true;\n  };\n\n  return (\n    <MapContainer\n      center={[0, 0]}\n      zoom={2.3}\n      scrollWheelZoom={false}\n      whenCreated={setMap}\n    >\n      <LayersControl>\n        <LayersControl.BaseLayer checked name=\"OpenStreetMap\">\n          <TileLayer\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n            attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n          />\n        </LayersControl.BaseLayer>\n        <LayersControl.BaseLayer name=\"Dark theme\">\n          <TileLayer\n            attribution={`&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a> &copy; <a href=\"http://cartodb.com/attributions\">CartoDB</a>`}\n            url={\n              \"https://cartodb-basemaps-{s}.global.ssl.fastly.net/dark_all/{z}/{x}/{y}.png\"\n            }\n          />\n        </LayersControl.BaseLayer>\n      </LayersControl>\n    </MapContainer>\n  );\n};\n","import React, { useCallback, useEffect, useState } from \"react\";\nimport \"./OverviewTab.scss\";\n\nexport const OverviewTab = () => {\n  const [data, setData] = useState<any>({});\n  const fetchData = useCallback(() => {\n    const url = \"https://disease.sh/v3/covid-19/historical/all\";\n    fetch(url)\n      .then((res) => res.json())\n      .then((res) => {\n        setData(res);\n      })\n      .catch((err) => {\n        console.warn({ err });\n      });\n  }, []);\n\n  useEffect(() => {\n    fetchData();\n    // eslint-disable-next-line\n  }, []);\n\n  return Object.keys(data).length > 0 ? (\n    <div>\n      <div className=\"tabs-wrapper\">\n        <div className=\"block\">\n          <div className=\"block-main\">\n            <label className=\"label-big\">Total cases</label>\n            <div className=\"number-big\">{data.cases.toLocaleString()}</div>\n          </div>\n          <div className=\"block-extra\">\n            <label className=\"label-big\">Today cases</label>\n            <div className=\"number-big\">{data.todayCases.toLocaleString()}</div>\n          </div>\n        </div>\n        <div className=\"block\">\n          <div className=\"block-main\">\n            <label className=\"label-big\">Total deaths</label>\n            <div className=\"number-big\">{data.deaths.toLocaleString()}</div>\n          </div>\n          <div className=\"block-extra\">\n            <label className=\"label-big\">Today deaths</label>\n            <div className=\"number-big\">\n              {data.todayDeaths.toLocaleString()}\n            </div>\n          </div>\n        </div>\n        <div className=\"block\">\n          <div className=\"block-main\">\n            <label className=\"label-big\">Total recovered</label>\n            <div className=\"number-big\">{data.recovered.toLocaleString()}</div>\n          </div>\n          <div className=\"block-extra\">\n            <label className=\"label-big\">Today recovered</label>\n            <div className=\"number-big\">\n              {data.todayRecovered.toLocaleString()}\n            </div>\n          </div>\n        </div>\n        <div className=\"block\">\n          <div className=\"block-main\">\n            <label className=\"label-big\">Total tests</label>\n            <div className=\"number-big\">{data.tests.toLocaleString()}</div>\n          </div>\n          <div className=\"block-extra\">\n            <label className=\"label-big\">Tests per one million</label>\n            <div className=\"number-big\">\n              {data.testsPerOneMillion.toLocaleString()}\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"last-updated\">\n        Last update {new Date(data.updated).toISOString()}\n      </div>\n    </div>\n  ) : null;\n};\n","import { createContext } from \"react\";\n\nconst GlobalContext = createContext({\n  darkTheme: true,\n  setDarkTheme: (isDark: boolean) => {},\n});\n\nexport { GlobalContext };\n","import React, { useState } from \"react\";\n\nimport \"./Home.scss\";\nimport { Footer } from \"../components/Footer/Footer\";\nimport { WorldMap } from \"../components/WorldMap/WorldMap\";\nimport { OverviewTab } from \"../components/OverviewTab/OverviewTab\";\nimport { GlobalContext } from \"../context/GlobalContext\";\n\nexport const Home = () => {\n  const [darkTheme, setDarkTheme] = useState<boolean>(true);\n\n  return (\n    <GlobalContext.Provider value={{ darkTheme, setDarkTheme }}>\n      <WorldMap />\n      <OverviewTab />\n      <Footer />\n    </GlobalContext.Provider>\n  );\n};\n","import React from \"react\";\nimport { Home } from \"./views/Home\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div>\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}