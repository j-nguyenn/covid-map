{"version":3,"sources":["views/Home.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Home","useState","data","setData","map","setMap","fetchData","useCallback","fetch","then","res","json","catch","err","console","warn","useEffect","formatGeoData","response","Array","isArray","length","geoJson","type","features","country","countryInfo","lat","lng","long","properties","geometry","coordinates","L","GeoJSON","pointToLayer","feature","latlng","updatedFormatted","casesString","updated","cases","deaths","recovered","slice","Date","toLocaleString","html","marker","icon","divIcon","className","riseOnHover","addTo","MapContainer","center","zoom","scrollWheelZoom","whenCreated","TileLayer","attribution","url","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4RAKaA,EAAO,WAClB,MAAwBC,mBAAc,IAAtC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAsBF,qBAAtB,mBAAOG,EAAP,KAAYC,EAAZ,KAEMC,EAAYC,uBAAY,WAE5BC,MADY,0CAETC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACC,GACLP,EAAQO,MAETE,OAAM,SAACC,GACNC,QAAQC,KAAK,CAAEF,aAElB,IAEHG,qBAAU,WACRV,MAEC,IAEHU,qBAAU,WACJZ,GAAOF,GACTe,EAAcf,KAGf,CAACE,EAAKF,IAET,IAAMe,EAAgB,SAACC,GAErB,GADgBC,MAAMC,QAAQF,IAAaA,EAASG,OAAS,EAC7D,CAEA,IAAMC,EAAe,CACnBC,KAAM,oBACNC,SAAUN,EAASd,KAAI,SAACqB,GACtB,MAA6BA,EAArBC,mBAAR,MAAsB,GAAtB,EACQC,EAAmBD,EAAnBC,IAAWC,EAAQF,EAAdG,KACb,MAAO,CACLN,KAAM,UACNO,WAAW,eACNL,GAELM,SAAU,CACRR,KAAM,QACNS,YAAa,CAACJ,EAAKD,SAML,IAAIM,IAAEC,QAAQZ,EAAS,CAC3Ca,aAAc,SAACC,EAASC,GACtB,IACIC,EACAC,EAFJ,EAA4BH,EAApBN,kBAAR,MAAqB,GAArB,EAIQL,EAA+CK,EAA/CL,QAASe,EAAsCV,EAAtCU,QAASC,EAA6BX,EAA7BW,MAAOC,EAAsBZ,EAAtBY,OAAQC,EAAcb,EAAda,UAEzCJ,EAAW,UAAME,GAEbA,EAAQ,MACVF,EAAW,UAAMA,EAAYK,MAAM,GAAI,GAA5B,OAGTJ,IACFF,EAAmB,IAAIO,KAAKL,GAASM,kBAGvC,IAAMC,EAAI,wGAGFtB,EAHE,8EAK4BgB,EAL5B,2DAMyBC,EANzB,8DAO4BC,EAP5B,gEAQ8BL,EAR9B,4DAWRC,EAXQ,yBAeV,OAAON,IAAEe,OAAOX,EAAQ,CACtBY,KAAMhB,IAAEiB,QAAQ,CACdC,UAAW,OACXJ,SAEFK,aAAa,OAILC,MAAMjD,KAGtB,OACE,cAACkD,EAAA,EAAD,CACEC,OAAQ,CAAC,GAAI,IACbC,KAAM,EACNC,iBAAiB,EACjBC,YAAarD,EAJf,SAME,cAACsD,EAAA,EAAD,CACEC,YAAY,yEACZC,IAAI,0D,MCjGGC,MARf,WACE,OACE,8BACE,cAAC,EAAD,OCOSC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBxD,MAAK,YAAkD,IAA/CyD,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.23172fa8.chunk.js","sourcesContent":["import React, { useCallback, useEffect, useState } from \"react\";\nimport { MapContainer, TileLayer } from \"react-leaflet\";\nimport L from \"leaflet\";\nimport \"./Home.scss\";\n\nexport const Home = () => {\n  const [data, setData] = useState<any>([]);\n  const [map, setMap] = useState<any>();\n\n  const fetchData = useCallback(() => {\n    const url = \"https://corona.lmao.ninja/v2/countries\";\n    fetch(url)\n      .then((res) => res.json())\n      .then((res) => {\n        setData(res);\n      })\n      .catch((err) => {\n        console.warn({ err });\n      });\n  }, []);\n\n  useEffect(() => {\n    fetchData();\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    if (map && data) {\n      formatGeoData(data);\n    }\n    // eslint-disable-next-line\n  }, [map, data]);\n\n  const formatGeoData = (response: any[]) => {\n    const hasData = Array.isArray(response) && response.length > 0;\n    if (!hasData) return;\n\n    const geoJson: any = {\n      type: \"FeatureCollection\",\n      features: response.map((country: any) => {\n        const { countryInfo = {} } = country;\n        const { lat, long: lng } = countryInfo;\n        return {\n          type: \"Feature\",\n          properties: {\n            ...country,\n          },\n          geometry: {\n            type: \"Point\",\n            coordinates: [lng, lat],\n          },\n        };\n      }),\n    };\n\n    const geoJsonLayers = new L.GeoJSON(geoJson, {\n      pointToLayer: (feature, latlng) => {\n        const { properties = {} } = feature;\n        let updatedFormatted;\n        let casesString;\n\n        const { country, updated, cases, deaths, recovered } = properties;\n\n        casesString = `${cases}`;\n\n        if (cases > 1000) {\n          casesString = `${casesString.slice(0, -3)}k+`;\n        }\n\n        if (updated) {\n          updatedFormatted = new Date(updated).toLocaleString();\n        }\n\n        const html = `\n      <span class=\"icon-marker\">\n        <span class=\"icon-marker-tooltip\">\n          <h2>${country}</h2>\n          <ul>\n            <li><strong>Confirmed:</strong> ${cases}</li>\n            <li><strong>Deaths:</strong> ${deaths}</li>\n            <li><strong>Recovered:</strong> ${recovered}</li>\n            <li><strong>Last Update:</strong> ${updatedFormatted}</li>\n          </ul>\n        </span>\n        ${casesString}\n      </span>\n    `;\n\n        return L.marker(latlng, {\n          icon: L.divIcon({\n            className: \"icon\",\n            html,\n          }),\n          riseOnHover: true,\n        });\n      },\n    });\n    geoJsonLayers.addTo(map);\n  };\n\n  return (\n    <MapContainer\n      center={[35, 40]}\n      zoom={2}\n      scrollWheelZoom={false}\n      whenCreated={setMap}\n    >\n      <TileLayer\n        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      />\n    </MapContainer>\n  );\n};\n","import React from \"react\";\nimport { Home } from \"./views/Home\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div>\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}